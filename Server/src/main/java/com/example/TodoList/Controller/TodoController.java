package com.example.TodoList.Controller;

import com.example.TodoList.Entity.TodoEntity;
import com.example.TodoList.Repository.TodoRepository;

import org.springframework.web.bind.annotation.*;
import org.springframework.beans.factory.annotation.Value;
import java.time.LocalDateTime;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import org.springframework.http.ResponseEntity;
import org.springframework.web.client.RestTemplate;

@RequestMapping("/api/todos")

@RestController
public class TodoController {
    @Value("${openai.api.key}")
    private String openaiApiKey;

    @Value("${slack.webhook.url}")
    private String slackWebhookUrl;

    private final TodoRepository todoRepository;

    public TodoController(TodoRepository todoRepository) {
        this.todoRepository = todoRepository;
    }

    @GetMapping("/{username}")
    public List<TodoEntity> getTodos(@PathVariable String username) {
        return todoRepository.findByUsername(username);
    }





    @PostMapping("/summarize/{username}")
    public ResponseEntity<?> summarizeAndSendToSlack(@PathVariable String username) {
        // 1. Fetch all todos for the user
        List<TodoEntity> todos = todoRepository.findByUsername(username);
        if (todos.isEmpty()) {
            return ResponseEntity.badRequest().body("No todos found for user.");
        }
        // 2. Build prompt for LLM
        StringBuilder prompt = new StringBuilder("Summarize the following to-do list in a concise, helpful way:\n");
        for (TodoEntity todo : todos) {
            prompt.append("- ").append(todo.getTitle());
            if (todo.isCompleted()) prompt.append(" (completed)");
            prompt.append("\n");
        }
        // 3. Call OpenAI API
//        String openaiApiKey = System.getenv("OPENAI_API_KEY");
//        if (openaiApiKey == null) {
//            return ResponseEntity.status(500).body("OpenAI API key not set in environment variable OPENAI_API_KEY");
//        }
        if (openaiApiKey == null || openaiApiKey.isEmpty()) {
            return ResponseEntity.status(500).body("OpenAI API key not set in application.properties or environment");
        }
        RestTemplate restTemplate = new RestTemplate();
        String openaiUrl = "https://api.openai.com/v1/chat/completions";
        Map<String, Object> requestBody = new HashMap<>();
        requestBody.put("model", "gpt-3.5-turbo");
        requestBody.put("messages", List.of(Map.of("role", "user", "content", prompt.toString())));
        requestBody.put("max_tokens", 100);
        org.springframework.http.HttpHeaders headers = new org.springframework.http.HttpHeaders();
        headers.set("Authorization", "Bearer " + openaiApiKey);
        headers.set("Content-Type", "application/json");
        org.springframework.http.HttpEntity<Map<String, Object>> entity = new org.springframework.http.HttpEntity<>(requestBody, headers);
        String summary;
        try {
            Map response = restTemplate.postForObject(openaiUrl, entity, Map.class);
            Object choices = response.get("choices");
            if (choices instanceof List && !((List) choices).isEmpty()) {
                Map first = (Map) ((List) choices).get(0);
                Map message = (Map) first.get("message");
                summary = (String) message.get("content");
            } else {
                return ResponseEntity.status(500).body("No summary generated by OpenAI.");
            }
        } catch (Exception e) {
            return ResponseEntity.status(500).body("OpenAI error: " + e.getMessage());
        }
//        // 4. Send to Slack
//        String slackWebhook = System.getenv("SLACK_WEBHOOK_URL");
//        if (slackWebhook == null) {
//            return ResponseEntity.status(500).body("Slack webhook URL not set in environment variable SLACK_WEBHOOK_URL");
//        }
//        Map<String, String> slackPayload = Map.of("text", summary);
//        try {
//            restTemplate.postForObject(slackWebhook, slackPayload, String.class);
//        } catch (Exception e) {
//            return ResponseEntity.status(500).body("Slack error: " + e.getMessage());
//        }

        if (slackWebhookUrl == null || slackWebhookUrl.isEmpty()) {
            return ResponseEntity.status(500).body("Slack webhook URL not set in application.properties or environment");
        }
        Map<String, String> slackPayload = Map.of("text", summary);
        try {
            restTemplate.postForObject(slackWebhookUrl, slackPayload, String.class);
        } catch (Exception e) {
            return ResponseEntity.status(500).body("Slack error: " + e.getMessage());
        }
        return ResponseEntity.ok(Map.of("summary", summary, "slack", "sent"));
    }


    @PutMapping("/{id}")
    public TodoEntity updateTodo(@PathVariable Long id, @RequestBody TodoEntity updated) {
        Optional<TodoEntity> todoOpt = todoRepository.findById(id);
        if (todoOpt.isPresent()) {
            TodoEntity todo = todoOpt.get();
            todo.setTitle(updated.getTitle());
            todo.setDescription(updated.getDescription());
            todo.setCompleted(updated.isCompleted());
            return todoRepository.save(todo);
        }
        throw new RuntimeException("Todo not found");
    }

    @DeleteMapping("/{id}")
    public void deleteTodo(@PathVariable Long id) {
        Optional<TodoEntity> todoOpt = todoRepository.findById(id);
        todoOpt.ifPresent(todo -> {
            todo.setDeletedAt(LocalDateTime.now());
            todoRepository.save(todo);
            todoRepository.deleteById(id);
        });
    }
}
